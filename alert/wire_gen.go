// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package alert

import (
	"github.com/detect-viz/shared-lib/auth/keycloak"
	"github.com/detect-viz/shared-lib/contacts"
	"github.com/detect-viz/shared-lib/infra/logger"
	"github.com/detect-viz/shared-lib/infra/scheduler"
	"github.com/detect-viz/shared-lib/labels"
	"github.com/detect-viz/shared-lib/models"
	"github.com/detect-viz/shared-lib/models/config"
	"github.com/detect-viz/shared-lib/mutes"
	"github.com/detect-viz/shared-lib/notifier"
	"github.com/detect-viz/shared-lib/rules"
	"github.com/detect-viz/shared-lib/storage/mysql"
	"github.com/detect-viz/shared-lib/templates"
	"github.com/google/wire"
	"go.uber.org/zap"
)

// Injectors from wire.go:

// InitializeAlertService 初始化 AlertService
func InitializeAlertService(config2 config.AlertConfig, global config.GlobalConfig, mysqlClient *mysql.Client, log logger.Logger, keycloak2 *keycloak.Client) (*Service, error) {
	zapLogger := ProvideZapLogger(log)
	serviceImpl := rules.NewService(mysqlClient, zapLogger)
	mutesServiceImpl := mutes.NewService(mysqlClient, zapLogger)
	notifierServiceImpl := notifier.NewService()
	contactsServiceImpl := contacts.NewService(mysqlClient, log, notifierServiceImpl)
	service := scheduler.NewService(log)
	templatesServiceImpl := templates.NewService(log)
	labelsServiceImpl := labels.NewService(mysqlClient)
	alertService := ProvideAlertService(config2, global, log, mysqlClient, serviceImpl, mutesServiceImpl, keycloak2, notifierServiceImpl, contactsServiceImpl, service, templatesServiceImpl, labelsServiceImpl)
	return alertService, nil
}

// wire.go:

// ProvideZapLogger 提供 zap.Logger
func ProvideZapLogger(log logger.Logger) *zap.Logger {
	return log.GetLogger()
}

// AlertSet 提供所有依賴的 wire Set
var AlertSet = wire.NewSet(

	ProvideZapLogger, rules.RuleSet, notifier.NotifySet, scheduler.SchedulerSet, mutes.MuteSet, templates.TemplateSet, contacts.ContactSet, labels.LabelSet, ProvideAlertService,
)

// ProvideAlertService 提供 AlertService 實例
func ProvideAlertService(config2 models.AlertConfig,

	global models.GlobalConfig,
	logSvc logger.Logger,
	mysqlClient *mysql.Client,

	rule rules.Service,
	mute mutes.Service, keycloak2 *keycloak.Client,

	notify notifier.Service,
	contact contacts.Service, scheduler2 *scheduler.Service,
	template templates.Service,

	label labels.Service,
) *Service {
	return NewService(config2, global,
		mysqlClient,
		logSvc,

		rule,
		mute, keycloak2, notify,
		contact, scheduler2, template,

		label,
	)
}
